# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type User @model {
  polls: [Poll!]! @hasMany
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
}

type Poll @model {
  user: User! @belongsTo
  questions: [Question!]! @hasMany
  #guestsIn: [Guest!]! @manyToMany(relationName: "PollGuestIn")
  #guestsExcluded: [Guest!] @manyToMany(relationName: "PollGuestExcluded")
  guests: [Guest!]! @hasMany
  linkName: LinkName @hasOne
  id: ID!
  title: String!
  isActive: Boolean!
  isLocked: Boolean!
  roomSize: Int!
}

type Question @model {
  poll: Poll! @belongsTo
  answers: [Answer!]! @hasMany
  id: ID!
  prompt: String!
  answerOptions: [String!]!
  questionType: String!
}

type Answer @model {
  question: Question! @belongsTo
  # maybe ambiguous - change from "owner" to "guest"?
  owner: Guest! @belongsTo
  answer: [String!]!
}

type Guest @model {
  #pollsIncluded: [Poll!]! @manyToMany(relationName: "PollGuestIn")
  #pollsExcluded: [Poll!]! @manyToMany(relationName: "PollGuestExcluded")
  poll: Poll! @belongsTo
  canVote: Boolean!
  answers: [Answer!]! @hasMany
  id: ID!
  name: String!
  key: String!
}

type LinkName @model {
  poll: Poll! @belongsTo
  name: String!
}

# Custom subscriptions to enable updates on associated types
type Subscription {
  onCreateAnswerForQuestion(questionAnswersId: ID!): Answer
    @aws_subscribe(mutations: ["createAnswer"])
  onCreateGuestForPoll(pollGuestsId: ID!): Guest
    @aws_subscribe(mutations: ["createGuest"])
  onCreateLinkNameForPoll(linkNamePollId: ID!): LinkName
    @aws_subscribe(mutations: ["createLinkName"])
  onCreateQuestionForPoll(pollQuestionsId: ID!): Question
    @aws_subscribe(mutations: ["createQuestion"])
  onUpdateAnswerForQuestion(questionAnswersId: ID!): Answer
    @aws_subscribe(mutations: ["updateAnswer"])
  onUpdateGuestForPoll(pollGuestsId: ID!): Guest
    @aws_subscribe(mutations: ["updateGuest"])
  onUpdateLinkNameForPoll(linkNamePollId: ID!): LinkName
    @aws_subscribe(mutations: ["updateLinkName"])
  onUpdateQuestionForPoll(pollQuestionsId: ID!): Question
    @aws_subscribe(mutations: ["updateQuestion"])
}
