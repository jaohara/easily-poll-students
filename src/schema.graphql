schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type ColorSwatch {
  color: String
  id: ID!
}

type ColorSwatchConnection {
  items: [ColorSwatch]
  nextToken: String
}

type Mutation {
  createColorSwatch(input: CreateColorSwatchInput!): ColorSwatch
  deleteColorSwatch(input: DeleteColorSwatchInput!): ColorSwatch
  updateColorSwatch(input: UpdateColorSwatchInput!): ColorSwatch
}

type Query {
  getColorSwatch(id: ID!): ColorSwatch
  listColorSwatches(filter: TableColorSwatchFilterInput, limit: Int, nextToken: String): ColorSwatchConnection
}

type Subscription {
  onCreateColorSwatch(color: String, id: ID): ColorSwatch @aws_subscribe(mutations : ["createColorSwatch"])
  onDeleteColorSwatch(color: String, id: ID): ColorSwatch @aws_subscribe(mutations : ["deleteColorSwatch"])
  onUpdateColorSwatch(color: String, id: ID): ColorSwatch @aws_subscribe(mutations : ["updateColorSwatch"])
}

input CreateColorSwatchInput {
  color: String
}

input DeleteColorSwatchInput {
  id: ID!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableColorSwatchFilterInput {
  color: TableStringFilterInput
  id: TableIDFilterInput
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateColorSwatchInput {
  color: String
  id: ID!
}
